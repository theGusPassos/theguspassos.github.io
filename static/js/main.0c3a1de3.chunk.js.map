{"version":3,"sources":["data/projects/portfolio/portfolio-figma-screenshot.png","data/projects/unity-state-machine/unity-state-machine.gif","images/contacts/gmail.png","images/contacts/github.png","images/contacts/linkedin.png","data/colors.ts","components/common-styles/styles.ts","common-functions/goToExternalPage.ts","components/common-styles/buttonStyles.ts","components/common-components/ButtonToExternalLink.tsx","data/projects/portfolio/PortfolioInfo.tsx","data/projects/portfolio/portfolio.ts","data/projects/unity-state-machine/UnityStateMachineInfo.tsx","data/projects/projectList.ts","data/projects/unity-state-machine/unityStateMachine.ts","components/project/list/ProjectCard.tsx","animations/animations.ts","components/contacts/contactCardClick.ts","common-functions/copyToClipboard.ts","components/contacts/ContactCard.tsx","data/contacts.ts","components/contacts/modalAnimation.ts","components/contacts/ContactsModal.tsx","components/contacts/ContactsButton.tsx","components/common-styles/requiredForAnimation.ts","components/project/list/ProjectListPage.tsx","components/home/common/HomeNavButton.tsx","components/home/common/bioStyle.ts","components/home/FrontPage.tsx","components/home/AboutPage.tsx","data/routes.ts","components/common-styles/transitionGroup.ts","components/home/HomePage.tsx","components/project/view/ProjectViewPage.tsx","components/Routes.tsx","data/device.ts","components/Body.tsx","App.tsx","index.tsx"],"names":["module","exports","colors","sectionWithText","css","defaultPadding","buttonOnHover","goToExternalPage","url","ref","window","open","opener","buttonStyle","Button","styled","button","LinkToExternal","props","onClick","onKeyDown","e","keyCode","charCode","goToExternalPageOnKeyDown","children","Info","section","PortfolioInfo","href","target","rel","portfolio","id","name","description","tags","imageAlt","image","img","projectInfo","UnityStateMachineInfo","title","projectList","ProjectCardStyled","HoverEffect","div","ProjectInfo","ProjectCard","history","useHistory","push","project","src","alt","AnimationDirection","GetAnimator","component","GetTranslateFromTransform","transform","GetAnimationTransform","animationDirection","FromUp","x","y","FromDown","FromLeft","FromRight","onCardClick","contact","text","input","document","createElement","setAttribute","body","appendChild","select","execCommand","removeChild","copyToClipboard","contactText","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","ContactCardStyled","ContactImage","ContactInfo","ContactCard","altImage","message","contacts","gmailLogo","linkedinLogo","githubLogo","modalAnimation","ModalBackground","ModalWrapper","ContactsContainer","LinkButtonStyled","ContactsModal","modalMarkup","map","key","onClose","ReactDOM","createPortal","Wrapper","ContactsButtonStyled","ContactsButton","React","useState","modalIsOpen","setIsOpen","CSSTransition","in","classNames","unmountOnExit","timeout","requiredForAnimation","ProjectListPageStyled","ProjectPageBackground","PageTitle","h1","ProjectListPage","i","HomeNaveButtonStyled","useMainColor","HomeNavButton","to","link","Bio","FrontPageAnimated","AnimationTransform","FrontPage","AboutPageAnimated","AboutPage","TransitionGroupStyled","TransitionGroup","HomePageStyled","HomeNavigation","HomePage","render","location","pathname","exact","path","ProjectViewStyled","ProjectTitle","ProjectTechStack","span","PaddedContent","Image","ProjectText","ProjectViewPage","Number","projectId","filter","a","useEffect","scrollTo","join","Routes","ReactGA","pageview","hash","renderProps","match","params","deviceType","deviceSize","isInDesktop","currentWidth","device","tablet","desktop","BodyGrid","withResizeDetector","isTablet","width","isDesktop","basename","configure","initialize","App","handleWidth","getElementById"],"mappings":"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","file":"static/js/main.0c3a1de3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portfolio-figma-screenshot.395ad626.png\";","module.exports = __webpack_public_path__ + \"static/media/unity-state-machine.759ae1bd.gif\";","module.exports = __webpack_public_path__ + \"static/media/gmail.62549d5c.png\";","module.exports = __webpack_public_path__ + \"static/media/github.9f96cfd1.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.07265057.png\";","const colors = {\r\n  mainColor: \"#5655A3\",\r\n  mainTextColor: \"#fff\",\r\n  mainBackgroundColor: \"#fff\",\r\n  secondColor: \"#726ff0\",\r\n  secondBackgroundColor: \"#f7f7f7\",\r\n\r\n  buttonClickedColor: \"#dedede\",\r\n};\r\n\r\nconst buttonColors = {\r\n  onHoverColor: \"#e6e6e6\",\r\n};\r\n\r\nexport { colors, buttonColors };\r\n","import { css } from \"styled-components\";\r\nimport { colors } from \"../../data/colors\";\r\n\r\nexport const sectionWithText = css`\r\n  line-height: 1.7;\r\n\r\n  p a,\r\n  ul li a {\r\n    color: ${colors.mainColor};\r\n  }\r\n\r\n  abbr {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport const defaultPadding = css`\r\n  padding: 10%;\r\n`;\r\n\r\nexport const buttonOnHover = css`\r\n  cursor: pointer;\r\n  transition: background-color 1s ease;\r\n  outline: none;\r\n  -webkit-tap-highlight-color: transparent;\r\n\r\n  :hover {\r\n    background-color: #00000055;\r\n  }\r\n`;\r\n","export const goToExternalPage = (url: string) => {\r\n  const ref = window.open(url, \"_blank\");\r\n  if (ref) ref.opener = null;\r\n};\r\n\r\nexport const goToExternalPageOnKeyDown = (e: any, url: string) => {\r\n  if (e.keyCode === 13 || e.charCode === 13) goToExternalPage(url);\r\n};\r\n","import { css } from \"styled-components\";\r\nimport { colors } from \"../../data/colors\";\r\n\r\nexport const buttonStyle = css`\r\n  text-align: center;\r\n  margin: auto;\r\n  border: none;\r\n  background-color: ${colors.mainBackgroundColor};\r\n\r\n  -webkit-tap-highlight-color: transparent;\r\n  text-decoration: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  :active,\r\n  :focus,\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {\r\n  goToExternalPage,\r\n  goToExternalPageOnKeyDown,\r\n} from \"../../common-functions/goToExternalPage\";\r\nimport styled from \"styled-components\";\r\nimport { buttonStyle } from \"../common-styles/buttonStyles\";\r\nimport { colors } from \"../../data/colors\";\r\n\r\nexport interface LinkToExternalProps {\r\n  url: string;\r\n  children: string;\r\n}\r\n\r\nconst Button = styled.button`\r\n  background-color: ${colors.mainBackgroundColor};\r\n  color: ${colors.mainColor};\r\n\r\n  font-size: 1.4em;\r\n  width: 100%;\r\n\r\n  ${buttonStyle};\r\n`;\r\n\r\nconst LinkToExternal = (props: LinkToExternalProps) => {\r\n  return (\r\n    <Button\r\n      onClick={() => goToExternalPage(props.url)}\r\n      onKeyDown={(e) => goToExternalPageOnKeyDown(e, props.url)}\r\n    >\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default LinkToExternal;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { sectionWithText } from \"../../../components/common-styles/styles\";\r\nimport LinkToExternal from \"../../../components/common-components/ButtonToExternalLink\";\r\n\r\nconst Info = styled.section`\r\n  ${sectionWithText}\r\n`;\r\n\r\nconst PortfolioInfo = () => {\r\n  return (\r\n    <Info>\r\n      <p>\r\n        This website was designed and developed by me using{\" \"}\r\n        <strong>React</strong>. The early prototypes were made with <b>Figma</b>\r\n        .\r\n      </p>\r\n      <LinkToExternal url=\"https://github.com/theGusPassos/theguspassos.github.io\">\r\n        Check the source code here\r\n      </LinkToExternal>\r\n      <p>\r\n        I'm using <strong>github pages</strong> to host the source code for\r\n        free. The build process consists on the generation of a production build\r\n        from the development branch and pushing the transpiled files into the\r\n        upstream master branch. The files are then served as a github page.{\" \"}\r\n        <a\r\n          href=\"https://github.com/gitname/react-gh-pages\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Here\r\n        </a>{\" \"}\r\n        is the step by step guide on how configure this build process.\r\n      </p>\r\n      <p>\r\n        Since this is just a static page without any back-end server, the\r\n        projects that populate the website are added manualy into a static list.\r\n        Every project has its own component with the HTML info (like this one\r\n        you're reading right now). It's definetly time consuming to add new\r\n        projects into the system, however this process won't be so frequent.\r\n        Besides, the component by project info page is a very flexible approach,\r\n        which is great.\r\n      </p>\r\n      <p>\r\n        I plan to make changes to the website by improving some responsivity and\r\n        accessibility problems. I'm 100% open to feedback, so if you have any\r\n        suggestion feel free to contact me =)\r\n      </p>\r\n    </Info>\r\n  );\r\n};\r\n\r\nexport default PortfolioInfo;\r\n","import Project from \"../../../models/project\";\r\nimport img from \"./portfolio-figma-screenshot.png\";\r\nimport PortfolioInfo from \"./PortfolioInfo\";\r\n\r\nexport const portfolio: Project = {\r\n  id: 1,\r\n  name: \"My Portfolio\",\r\n  description:\r\n    \"The website you're accessing right now was designed and developed by me.\",\r\n  tags: [\"react\"],\r\n  imageAlt: \"an image of this very own website\",\r\n  image: img,\r\n  projectInfo: PortfolioInfo,\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { sectionWithText } from \"../../../components/common-styles/styles\";\r\nimport LinkToExternal from \"../../../components/common-components/ButtonToExternalLink\";\r\n\r\nconst Info = styled.section`\r\n  ${sectionWithText}\r\n`;\r\n\r\nconst UnityStateMachineInfo = () => {\r\n  return (\r\n    <Info>\r\n      <p>\r\n        This is a sample project in <strong>Unity</strong> that implements a{\" \"}\r\n        <strong>Finite State Machine</strong> for character behaviour.\r\n      </p>\r\n      <LinkToExternal url=\"https://github.com/theGusPassos/unity-finite-state-machine\">\r\n        Check the source code here\r\n      </LinkToExternal>\r\n      <p>\r\n        The <abbr title=\"Finite State Machine\">FSM</abbr> is a design pattern\r\n        used for various scenarios other than character behaviour, more on that\r\n        can be read in Robert Nystrom's{\" \"}\r\n        <a\r\n          href=\"https://gameprogrammingpatterns.com/contents.html\"\r\n          target=\"_blak\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Game Programming Patterns book\r\n        </a>\r\n        .\r\n      </p>\r\n      <p>\r\n        This implementation does use{\" \"}\r\n        <abbr title=\"Object Oriented Programming\">OOP</abbr> design but still\r\n        allows the standard component design through customization and\r\n        extension.\r\n      </p>\r\n      <p>\r\n        The setup consists of States that defines character's behaviour,\r\n        Transitions that defines how states change between themselves and the{\" \"}\r\n        <abbr title=\"Finite State Machine\">FSM</abbr> class that holds every\r\n        State and sets every Transition for a given character.\r\n      </p>\r\n      <p>\r\n        A Awareness interface is also included to receive input from external\r\n        objects, in the demo it's used to get the distance between the non\r\n        playable character and the player, when the player is close enough a\r\n        transition is triggered. But it can also be used for other types of\r\n        external events.\r\n      </p>\r\n      <p>\r\n        The demo is pretty simple and easily extensible. Feel free to use it as\r\n        you like =)\r\n      </p>\r\n    </Info>\r\n  );\r\n};\r\n\r\nexport default UnityStateMachineInfo;\r\n","import Project from \"../../models/project\";\r\nimport { portfolio } from \"./portfolio/portfolio\";\r\nimport { unityStateMachine } from \"./unity-state-machine/unityStateMachine\";\r\n\r\nexport const projectList: Project[] = [portfolio, unityStateMachine];\r\n\r\nexport const getProjectById = (id: number) => {\r\n  return projectList.filter((a) => a.id === id)[0];\r\n};\r\n","import Project from \"../../../models/project\";\r\nimport img from \"./unity-state-machine.gif\";\r\nimport UnityStateMachineInfo from \"./UnityStateMachineInfo\";\r\n\r\nexport const unityStateMachine: Project = {\r\n  id: 2,\r\n  name: \"Unity State Machine\",\r\n  description:\r\n    \"Implementation of a finite state machine for NPC behaviour in Unity\",\r\n  tags: [\"C#\", \"Unity\"],\r\n  imageAlt:\r\n    \"The gif shows a 2D scrolling game with two squares, a blue one representing\" +\r\n    \" the player and a red one as the enemy. The enemy has a text showing 'Patrol State'\" +\r\n    \" over his head and is walking from one side to the other. When the blue character (the player)\" +\r\n    \" gets closer, the text change to 'Follow State' and the enemy starts following the player\",\r\n  image: img,\r\n  projectInfo: UnityStateMachineInfo,\r\n};\r\n","import React from \"react\";\r\nimport Project from \"../../../models/project\";\r\nimport styled from \"styled-components\";\r\nimport { colors } from \"../../../data/colors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { buttonOnHover } from \"../../common-styles/styles\";\r\n\r\ninterface ProjectCardProps {\r\n  project: Project;\r\n}\r\n\r\nconst ProjectCardStyled = styled.button`\r\n  position: relative;\r\n  background-color: #fff;\r\n  margin-bottom: 30px;\r\n  padding: 0;\r\n  border: none;\r\n  box-shadow: 1px 2px 2px 1px #00000075;\r\n  text-align: initial;\r\n  font-size: 1em;\r\n\r\n  img {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst HoverEffect = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n\r\n  ${buttonOnHover};\r\n`;\r\n\r\nconst ProjectInfo = styled.div`\r\n  padding: 10px 20px;\r\n  color: ${colors.mainColor};\r\n\r\n  strong {\r\n    display: block;\r\n    margin-bottom: 10px;\r\n    font-size: 1.5em;\r\n  }\r\n\r\n  span {\r\n    font-size: 1.2em;\r\n  }\r\n`;\r\n\r\nconst ProjectCard = (props: ProjectCardProps) => {\r\n  const history = useHistory();\r\n\r\n  const onCardClick = () => {\r\n    history.push(\"/project/\" + props.project.id);\r\n  };\r\n\r\n  return (\r\n    <ProjectCardStyled onClick={onCardClick}>\r\n      <HoverEffect></HoverEffect>\r\n      <img src={props.project.image} alt={props.project.imageAlt}></img>\r\n      <ProjectInfo>\r\n        <strong>{props.project.name}</strong>\r\n        <span>{props.project.description}</span>\r\n      </ProjectInfo>\r\n    </ProjectCardStyled>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import styled, { AnyStyledComponent } from \"styled-components\";\r\n\r\nexport const animationSpeed = 550;\r\nconst animationDistance = 150;\r\n\r\nexport enum AnimationDirection {\r\n  FromUp,\r\n  FromDown,\r\n  FromRight,\r\n  FromLeft,\r\n}\r\n\r\nexport interface Transform {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface AnimatorProps {\r\n  transform: Transform;\r\n}\r\n\r\nexport const GetAnimator = (component: AnyStyledComponent) => {\r\n  return styled(component)`\r\n    &.animation-enter {\r\n      transform: ${(props: AnimatorProps) =>\r\n        GetTranslateFromTransform(props.transform)};\r\n    }\r\n\r\n    &.animation-enter-active {\r\n      transform: translateX(0);\r\n      transition-timing-function: ease-in-out;\r\n      transition: transform ${animationSpeed}ms;\r\n    }\r\n\r\n    &.animation-exit {\r\n      transform: translateX(0);\r\n    }\r\n\r\n    &.animation-exit-active {\r\n      transform: ${(props: AnimatorProps) =>\r\n        GetTranslateFromTransform(props.transform)};\r\n      transition-timing-function: ease-in-out;\r\n      transition: transform ${animationSpeed}ms;\r\n    }\r\n  `;\r\n};\r\n\r\nexport const GetAnimationTransform = (\r\n  animationDirection: AnimationDirection\r\n): Transform => {\r\n  switch (animationDirection) {\r\n    case AnimationDirection.FromUp:\r\n      return { x: 0, y: -animationDistance };\r\n\r\n    case AnimationDirection.FromDown:\r\n      return { x: 0, y: animationDistance };\r\n\r\n    case AnimationDirection.FromLeft:\r\n      return { x: -animationDistance, y: 0 };\r\n\r\n    case AnimationDirection.FromRight:\r\n      return { x: animationDistance, y: 0 };\r\n  }\r\n};\r\n\r\nexport const GetTranslateFromTransform = (transform: Transform): string => {\r\n  return `translate(${transform.x}%, ${transform.y}%)`;\r\n};\r\n","import Contact from \"../../models/contact\";\r\nimport { copyToClipboard } from \"../../common-functions/copyToClipboard\";\r\nimport { toast } from \"react-toastify\";\r\nimport { goToExternalPage } from \"../../common-functions/goToExternalPage\";\r\n\r\nexport const onCardClick = (contact: Contact) => {\r\n  if (contact.url) {\r\n    goToExternalPage(contact.url);\r\n  } else {\r\n    copyToClipboard(contact.contactText);\r\n    toast.info(`my e-mail has been copied to your clipboard =)`, {\r\n      position: \"bottom-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: false,\r\n    });\r\n  }\r\n};\r\n\r\nexport const onCardKeyDown = (e: any, contact: Contact) => {\r\n  if (e.keyCode === 13 || e.charCode === 13) onCardClick(contact);\r\n};\r\n","export const copyToClipboard = (text: string) => {\r\n  const input = document.createElement(\"input\");\r\n  input.setAttribute(\"value\", text);\r\n  document.body.appendChild(input);\r\n  input.select();\r\n  document.execCommand(\"copy\");\r\n  document.body.removeChild(input);\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Contact from \"../../models/contact\";\r\nimport { onCardClick } from \"./contactCardClick\";\r\nimport { buttonOnHover } from \"../common-styles/styles\";\r\n\r\nconst ContactCardStyled = styled.div`\r\n  padding: 5% 10%;\r\n  display: flex;\r\n  font-size: 1em;\r\n\r\n  ${buttonOnHover};\r\n`;\r\n\r\nconst ContactImage = styled.img`\r\n  width: 15%;\r\n  height: 15%;\r\n`;\r\n\r\nconst ContactInfo = styled.div`\r\n  align-self: flex-end;\r\n\r\n  span,\r\n  strong {\r\n    display: block;\r\n    margin-left: 10px;\r\n  }\r\n`;\r\n\r\ninterface ContactCardProps {\r\n  contact: Contact;\r\n}\r\n\r\nconst ContactCard = (props: ContactCardProps) => {\r\n  return (\r\n    <ContactCardStyled onClick={() => onCardClick(props.contact)}>\r\n      <ContactImage\r\n        src={props.contact.image}\r\n        alt={props.contact.altImage}\r\n      ></ContactImage>\r\n      <ContactInfo>\r\n        <strong>{props.contact.message}</strong>\r\n        <span>{props.contact.contactText}</span>\r\n      </ContactInfo>\r\n    </ContactCardStyled>\r\n  );\r\n};\r\n\r\nexport default ContactCard;\r\n","import Contact from \"../models/contact\";\r\nimport gmailLogo from \"../images/contacts/gmail.png\";\r\nimport githubLogo from \"../images/contacts/github.png\";\r\nimport linkedinLogo from \"../images/contacts/linkedin.png\";\r\n\r\nexport const contacts: Contact[] = [\r\n  {\r\n    image: gmailLogo,\r\n    altImage: \"gmail logo\",\r\n    message: \"mail me\",\r\n    contactText: \"theguspassos@gmail.com\",\r\n  },\r\n  {\r\n    image: linkedinLogo,\r\n    altImage: \"linkedin logo\",\r\n    message: \"connect with me\",\r\n    contactText: \"linkedin.com/in/theguspassos/\",\r\n    url: \"https://www.linkedin.com/in/theguspassos/\",\r\n  },\r\n  {\r\n    image: githubLogo,\r\n    altImage: \"github logo\",\r\n    message: \"code with me\",\r\n    contactText: \"github/theguspassos\",\r\n    url: \"https://github.com/theGusPassos\",\r\n  },\r\n];\r\n","import { css } from \"styled-components\";\r\nimport { animationSpeed } from \"../../animations/animations\";\r\n\r\nexport const modalAnimation = css`\r\n  &.animation-enter {\r\n    opacity: 0;\r\n\r\n    > div:first-child {\r\n      transform: translate(0, 100%);\r\n    }\r\n  }\r\n\r\n  &.animation-enter-active {\r\n    opacity: 1;\r\n    transition: opacity ${animationSpeed}ms;\r\n\r\n    > div:first-child {\r\n      transform: translate(0, 0);\r\n      transition-timing-function: ease-in-out;\r\n      transition: transform ${animationSpeed}ms;\r\n    }\r\n  }\r\n\r\n  &.animation-exit {\r\n    opacity: 1;\r\n\r\n    > div:first-child {\r\n      transform: translate(0, 0);\r\n    }\r\n  }\r\n\r\n  &.animation-exit-active {\r\n    opacity: 0;\r\n    transition: opacity ${animationSpeed}ms;\r\n\r\n    > div:first-child {\r\n      transform: translate(0, 100%);\r\n      transition-timing-function: ease-in-out;\r\n      transition: transform ${animationSpeed}ms;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport styled from \"styled-components\";\r\nimport ContactCard from \"./ContactCard\";\r\nimport { contacts } from \"../../data/contacts\";\r\nimport { colors } from \"../../data/colors\";\r\nimport Contact from \"../../models/contact\";\r\nimport { modalAnimation } from \"./modalAnimation\";\r\nimport { buttonStyle } from \"../common-styles/buttonStyles\";\r\n\r\nconst ModalBackground = styled.div`\r\n  background: rgba(0, 0, 0, 0.2);\r\n  height: 100%;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 99999;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  ${modalAnimation};\r\n`;\r\n\r\nconst ModalWrapper = styled.div`\r\n  background-color: #fff;\r\n  z-index: 999999;\r\n  width: 100%;\r\n  max-width: 400px;\r\n`;\r\n\r\nconst ContactsContainer = styled.div`\r\n  padding: 20px;\r\n\r\n  > div:nth-child(2) {\r\n    border-top: 1px solid ${colors.mainColor};\r\n    border-bottom: 1px solid ${colors.mainColor};\r\n  }\r\n`;\r\n\r\nconst LinkButtonStyled = styled.button`\r\n  color: ${colors.mainColor};\r\n  font-size: 1.4em;\r\n  width: 100%;\r\n  box-shadow: 0px 3px 11px 0px #0000009c;\r\n  padding: 10px 20px;\r\n  background-color: ${colors.mainBackgroundColor};\r\n\r\n  ${buttonStyle};\r\n`;\r\n\r\ninterface ContactsModalProps {\r\n  onClose(): void;\r\n}\r\n\r\nconst ContactsModal = (props: ContactsModalProps) => {\r\n  const getContacts = () => {\r\n    return contacts.map((contact: Contact, key: number) => {\r\n      return <ContactCard key={key} contact={contact}></ContactCard>;\r\n    });\r\n  };\r\n\r\n  const modalMarkup = (\r\n    <ModalBackground>\r\n      <ModalWrapper>\r\n        <ContactsContainer>{getContacts()}</ContactsContainer>\r\n        <LinkButtonStyled onClick={() => props.onClose()}>\r\n          Close\r\n        </LinkButtonStyled>\r\n      </ModalWrapper>\r\n    </ModalBackground>\r\n  );\r\n\r\n  return ReactDOM.createPortal(modalMarkup, document.body);\r\n};\r\n\r\nexport default ContactsModal;\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { animationSpeed } from \"../../animations/animations\";\r\nimport ContactsModal from \"./ContactsModal\";\r\nimport styled from \"styled-components\";\r\nimport { colors } from \"../../data/colors\";\r\nimport { buttonStyle } from \"../common-styles/buttonStyles\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst ContactsButtonStyled = styled.button`\r\n  font-size: 1.5em;\r\n  ${buttonStyle};\r\n`;\r\n\r\nconst ContactsButton = () => {\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ContactsButtonStyled onClick={() => setIsOpen(true)}>\r\n        my contacts\r\n      </ContactsButtonStyled>\r\n      <CSSTransition\r\n        in={modalIsOpen}\r\n        classNames=\"animation\"\r\n        unmountOnExit\r\n        timeout={animationSpeed}\r\n      >\r\n        <ContactsModal onClose={() => setIsOpen(false)}></ContactsModal>\r\n      </CSSTransition>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ContactsButton;\r\n","import { css } from \"styled-components\";\r\n\r\nexport const requiredForAnimation = css`\r\n  position: absolute;\r\n`;\r\n","import React, { Fragment } from \"react\";\r\nimport { projectList } from \"../../../data/projects/projectList\";\r\nimport Project from \"../../../models/project\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  GetAnimator,\r\n  GetAnimationTransform,\r\n  AnimationDirection,\r\n} from \"../../../animations/animations\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport { defaultPadding } from \"../../common-styles/styles\";\r\nimport { colors } from \"../../../data/colors\";\r\nimport ContactsButton from \"../../contacts/ContactsButton\";\r\nimport { requiredForAnimation } from \"../../common-styles/requiredForAnimation\";\r\n\r\nconst ProjectListPageStyled = styled.section`\r\n  ${defaultPadding};\r\n  ${requiredForAnimation};\r\n  padding-bottom: 0 !important;\r\n\r\n  button {\r\n    color: ${colors.mainColor};\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\n\r\nconst ProjectPageBackground = styled.div`\r\n  position: absolute;\r\n  background-color: ${colors.mainColor};\r\n  z-index: -9999;\r\n  right: 0;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 80%;\r\n`;\r\n\r\nconst PageTitle = styled.h1`\r\n  margin-top: 0;\r\n  margin-bottom: 30px;\r\n  color: ${colors.mainTextColor};\r\n  text-align: center;\r\n`;\r\n\r\nconst ProjectListPage = () => {\r\n  const getProjects = () => {\r\n    return projectList.map((project: Project, i: number) => {\r\n      return (\r\n        <Fragment>\r\n          <ProjectCard key={i} project={project}></ProjectCard>\r\n          {i === 0 ? <ContactsButton key={-1}></ContactsButton> : null}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ProjectListPageStyled>\r\n      <ProjectPageBackground></ProjectPageBackground>\r\n      <PageTitle>my projects</PageTitle>\r\n      {getProjects()}\r\n    </ProjectListPageStyled>\r\n  );\r\n};\r\n\r\nexport default ProjectListPage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { colors } from \"../../../data/colors\";\r\nimport { buttonStyle } from \"../../common-styles/buttonStyles\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\ninterface ColorProp {\r\n  useMainColor?: boolean;\r\n}\r\n\r\nconst HomeNaveButtonStyled = styled.div`\r\n  text-align: center;\r\n  margin: auto;\r\n  font-size: 1.5em;\r\n\r\n  a {\r\n    color: ${(props: ColorProp) =>\r\n      props.useMainColor ? colors.mainColor : colors.mainTextColor};\r\n\r\n    background-color: ${(props: ColorProp) =>\r\n      props.useMainColor\r\n        ? colors.mainBackgroundColor\r\n        : colors.mainColor} !important;\r\n\r\n    ${buttonStyle};\r\n  }\r\n`;\r\n\r\ninterface HomeNavButtonProps extends ColorProp {\r\n  children: string;\r\n  link: string;\r\n}\r\n\r\nconst HomeNavButton = (props: HomeNavButtonProps) => {\r\n  return (\r\n    <Wrapper>\r\n      <HomeNaveButtonStyled useMainColor={props.useMainColor}>\r\n        <Link to={props.link}>{props.children}</Link>\r\n      </HomeNaveButtonStyled>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default HomeNavButton;\r\n","import styled from \"styled-components\";\r\nimport { defaultPadding, sectionWithText } from \"../../common-styles/styles\";\r\n\r\nconst Bio = styled.div`\r\n  font-size: 1.2em;\r\n  margin: auto;\r\n\r\n  ${defaultPadding};\r\n  ${sectionWithText};\r\n`;\r\n\r\nexport default Bio;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport HomeNavButton from \"./common/HomeNavButton\";\r\nimport { defaultPadding } from \"../common-styles/styles\";\r\nimport Bio from \"./common/bioStyle\";\r\nimport {\r\n  GetAnimator,\r\n  GetAnimationTransform,\r\n  AnimationDirection,\r\n} from \"../../animations/animations\";\r\nimport { requiredForAnimation } from \"../common-styles/requiredForAnimation\";\r\n\r\nconst FrontPageStyled = styled.section`\r\n  display: grid;\r\n  grid-template-rows: 20% 70% 10%;\r\n  height: 100%;\r\n  ${requiredForAnimation};\r\n`;\r\n\r\nconst FrontPageAnimated = GetAnimator(FrontPageStyled);\r\nconst AnimationTransform = GetAnimationTransform(AnimationDirection.FromLeft);\r\n\r\nconst Info = styled.div`\r\n  ${defaultPadding};\r\n\r\n  h1 {\r\n    font-size: 2em;\r\n    margin: 0;\r\n  }\r\n\r\n  span {\r\n    font-size: 1.6em;\r\n  }\r\n`;\r\n\r\nconst FrontPage = () => {\r\n  return (\r\n    <FrontPageAnimated transform={AnimationTransform}>\r\n      <Info>\r\n        <h1>Gustavo Passos</h1>\r\n        <span>Software and Game Developer</span>\r\n      </Info>\r\n      <Bio>\r\n        <p>\r\n          I’m interested in developing any kind of software regardless of the\r\n          tech stack.\r\n        </p>\r\n        <p>\r\n          The software quality and user experience are the most important things\r\n          for me. I look forward to working with people that value the same =)\r\n        </p>\r\n      </Bio>\r\n      <HomeNavButton link=\"/about\">more about me</HomeNavButton>\r\n    </FrontPageAnimated>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Bio from \"./common/bioStyle\";\r\nimport {\r\n  GetAnimator,\r\n  AnimationDirection,\r\n  GetAnimationTransform,\r\n} from \"../../animations/animations\";\r\nimport { requiredForAnimation } from \"../common-styles/requiredForAnimation\";\r\nimport ContactsButton from \"../contacts/ContactsButton\";\r\nimport { colors } from \"../../data/colors\";\r\nimport HomeNavButton from \"./common/HomeNavButton\";\r\n\r\nconst AboutPageStyled = styled.section`\r\n  display: grid;\r\n  height: 100%;\r\n  grid-template-rows: 90% 10%;\r\n  ${requiredForAnimation};\r\n\r\n  button {\r\n    color: ${colors.mainTextColor};\r\n    background-color: ${colors.mainColor} !important;\r\n  }\r\n`;\r\n\r\nconst AboutPageAnimated = GetAnimator(AboutPageStyled);\r\nconst AnimationTransform = GetAnimationTransform(AnimationDirection.FromRight);\r\n\r\nconst AboutPage = () => {\r\n  return (\r\n    <AboutPageAnimated transform={AnimationTransform}>\r\n      <Bio>\r\n        <p>\r\n          I’m a 22 years old developer who’s been programming professionally for\r\n          5 years in brazillian companies.\r\n        </p>\r\n        <p>\r\n          I'm interested in developing any kind of software or game, regardless\r\n          of the tech stack. The software quality and the user experience are\r\n          the most important things to me.\r\n        </p>\r\n        <p>If you need help in a project of yours feel free to contact me =)</p>\r\n      </Bio>{\" \"}\r\n      <ContactsButton></ContactsButton>\r\n    </AboutPageAnimated>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n","export const homePath = \"/\";\r\nexport const homePathHash = `#${homePath}`;\r\n\r\nexport const aboutPath = \"/about\";\r\nexport const aboutPathHash = `#${aboutPath}`;\r\n\r\nexport const projectListPath = \"/projects\";\r\nexport const projectListPathHash = `#${projectListPath}`;\r\n\r\nexport const projectPath = \"/project/:id\";\r\nexport const projectPathHash = `#${projectPath}`;\r\n","import styled from \"styled-components\";\r\nimport { TransitionGroup } from \"react-transition-group\";\r\n\r\nconst TransitionGroupStyled = styled(TransitionGroup)`\r\n  height: 100%;\r\n  position: relative;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport default TransitionGroupStyled;\r\n","import React from \"react\";\r\nimport FrontPage from \"./FrontPage\";\r\nimport styled from \"styled-components\";\r\nimport { colors } from \"../../data/colors\";\r\nimport HomeNavButton from \"./common/HomeNavButton\";\r\nimport AboutPage from \"./AboutPage\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { projectListPath } from \"../../data/routes\";\r\nimport { animationSpeed } from \"../../animations/animations\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport TransitionGroupStyled from \"../common-styles/transitionGroup\";\r\nimport { requiredForAnimation } from \"../common-styles/requiredForAnimation\";\r\n\r\nconst HomePageStyled = styled.section`\r\n  ${requiredForAnimation};\r\n  width: 100%;\r\n  height: 100%;\r\n  display: grid;\r\n  grid-template-rows: 90% 10%;\r\n  background-color: white;\r\n  z-index: 10;\r\n`;\r\n\r\nconst HomeNavigation = styled.div`\r\n  background-color: ${colors.mainColor};\r\n  color: ${colors.mainTextColor};\r\n`;\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <HomePageStyled>\r\n      <HomeNavigation>\r\n        <Route\r\n          render={({ location }) => (\r\n            <TransitionGroupStyled>\r\n              <CSSTransition\r\n                key={location?.pathname}\r\n                classNames=\"animation\"\r\n                timeout={animationSpeed}\r\n              >\r\n                <Switch location={location}>\r\n                  <Route exact path=\"/\">\r\n                    <FrontPage></FrontPage>\r\n                  </Route>\r\n\r\n                  <Route exact path=\"/about\">\r\n                    <AboutPage></AboutPage>\r\n                  </Route>\r\n                </Switch>\r\n              </CSSTransition>\r\n            </TransitionGroupStyled>\r\n          )}\r\n        ></Route>\r\n      </HomeNavigation>\r\n      <HomeNavButton link={projectListPath} useMainColor>\r\n        see my work\r\n      </HomeNavButton>\r\n    </HomePageStyled>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { getProjectById } from \"../../../data/projects/projectList\";\r\nimport DeviceInfo from \"../../../models/deviceInfo\";\r\nimport { colors } from \"../../../data/colors\";\r\nimport { sectionWithText } from \"../../common-styles/styles\";\r\n\r\ninterface ProjectViewProps extends DeviceInfo {\r\n  projectId: number;\r\n}\r\n\r\nconst ProjectViewStyled = styled.section``;\r\n\r\nconst ProjectTitle = styled.h1`\r\n  color: ${colors.mainColor};\r\n  font-size: 1.8em;\r\n  margin: 0;\r\n`;\r\n\r\nconst ProjectTechStack = styled.span`\r\n  color: ${colors.mainColor};\r\n  font-size: 1.2em;\r\n`;\r\n\r\nconst PaddedContent = styled.div`\r\n  padding: 0 5% 5% 5%;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 100%;\r\n`;\r\n\r\nconst ProjectText = styled.section`\r\n  ${sectionWithText};\r\n  padding-top: 10%;\r\n`;\r\n\r\nconst ProjectViewPage = (props: ProjectViewProps) => {\r\n  let project = getProjectById(Number(props.projectId));\r\n\r\n  const concatTags = (tags: string[]) => {\r\n    return tags.join(\" and \");\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <ProjectViewStyled>\r\n      <Image src={project.image} alt={project.imageAlt}></Image>\r\n      <PaddedContent>\r\n        <ProjectTitle>{project.name}</ProjectTitle>\r\n        <ProjectTechStack>\r\n          built with {concatTags(project.tags)}\r\n        </ProjectTechStack>\r\n        <ProjectText>{project.projectInfo()}</ProjectText>\r\n      </PaddedContent>\r\n    </ProjectViewStyled>\r\n  );\r\n};\r\n\r\nexport default ProjectViewPage;\r\n","import React, { useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport ProjectListPage from \"./project/list/ProjectListPage\";\r\nimport HomePage from \"./home/HomePage\";\r\nimport ProjectViewPage from \"./project/view/ProjectViewPage\";\r\nimport { homePath, projectPath, projectListPath } from \"../data/routes\";\r\nimport DeviceInfo from \"../models/deviceInfo\";\r\nimport ReactGA from \"react-ga\";\r\n\r\ninterface RoutesProps extends DeviceInfo {\r\n  location: any;\r\n}\r\n\r\nconst Routes = (props: RoutesProps) => {\r\n  useEffect(() => {\r\n    ReactGA.pageview(window.location.hash);\r\n  }, []);\r\n\r\n  return (\r\n    <Switch location={props.location}>\r\n      <Route exact path={projectListPath}>\r\n        <ProjectListPage></ProjectListPage>\r\n      </Route>\r\n\r\n      <Route\r\n        exact\r\n        path={projectPath}\r\n        render={(renderProps) => {\r\n          return (\r\n            <ProjectViewPage\r\n              projectId={renderProps.match.params.id}\r\n              deviceType={props.deviceType}\r\n            ></ProjectViewPage>\r\n          );\r\n        }}\r\n      ></Route>\r\n\r\n      <Route path={homePath}>\r\n        <HomePage></HomePage>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const deviceSize = {\r\n  tablet: 500,\r\n  desktop: 920,\r\n};\r\n\r\nexport function isInDesktop(currentWidth: number) {\r\n  return currentWidth > deviceSize.desktop;\r\n}\r\n\r\nexport function isInTablet(currentWidth: number) {\r\n  return currentWidth > deviceSize.tablet;\r\n}\r\n\r\nexport const device = {\r\n  tablet: `(min-width: ${deviceSize.tablet}px)`,\r\n  desktop: `(min-width: ${deviceSize.desktop}px)`,\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport { LastLocationProvider } from \"react-router-last-location\";\r\nimport Routes from \"./Routes\";\r\nimport { device, isInDesktop, isInTablet } from \"../data/device\";\r\nimport { withResizeDetector } from \"react-resize-detector\";\r\nimport ResizeListenerProps from \"../models/resizeListenerProps\";\r\nimport { DeviceType } from \"../models/deviceInfo\";\r\nimport TransitionGroupStyled from \"./common-styles/transitionGroup\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { animationSpeed } from \"../animations/animations\";\r\n\r\nconst BodyGrid = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  margin: auto;\r\n  max-width: 1400px;\r\n\r\n  @media ${device.desktop} {\r\n    display: block;\r\n    box-shadow: 0px 3px 11px 0px #0000000c;\r\n  }\r\n`;\r\n\r\ninterface BodyProps extends ResizeListenerProps {}\r\n\r\nconst Body = (props: BodyProps) => {\r\n  const deviceType: DeviceType = {\r\n    isTablet: isInTablet(props.width),\r\n    isDesktop: isInDesktop(props.width),\r\n  };\r\n\r\n  return (\r\n    <BodyGrid>\r\n      <HashRouter basename=\"/\">\r\n        <LastLocationProvider>\r\n          <Route\r\n            render={({ location }) => (\r\n              <Routes deviceType={deviceType} location={location}></Routes>\r\n            )}\r\n          ></Route>\r\n        </LastLocationProvider>\r\n      </HashRouter>\r\n    </BodyGrid>\r\n  );\r\n};\r\n\r\nexport default withResizeDetector(Body);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Body from \"./components/Body\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport ReactGA from \"react-ga\";\r\nimport \"./style/scrollbar.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ntoast.configure();\r\nReactGA.initialize(\"UA-163830671-1\");\r\n\r\nconst App = () => {\r\n  return (\r\n    <Body handleWidth>\r\n      <ToastContainer></ToastContainer>\r\n    </Body>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\n"],"sourceRoot":""}